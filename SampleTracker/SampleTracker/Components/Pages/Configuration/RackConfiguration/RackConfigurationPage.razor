@page "/Pages/Configuration/RackConfiguration"
@rendermode InteractiveServer
@using BAL
@using BAL.DTOs
@inject RackConfigurationRepo RackConfigurationRepo


<PageTitle>RackConfigurationPage</PageTitle>

<h3>Rack Configuration</h3>

    <div class="mb-3">
        <label class="form-label">Id:</label>
        <label class="form-label">@Rack.Id</label>
    </div>

    <div class="mb-3">
        <label for="exampleFormControlInput1" class="form-label">Name</label>
        <input type="text" class="form-control" @bind="Rack.RackName">
    </div>

    <div class="mb-3">
        <label for="exampleFormControlInput1" class="form-label">Rows</label>
        <input type="number" class="form-control" @bind="Rack.NumberOfRows">
    </div>

    <div class="mb-3">
        <label for="exampleFormControlInput1" class="form-label">Columns</label>
        <input type="number" class="form-control" @bind="Rack.NumberOfColumns">
    </div>

    <button class="btn btn-outline-success" @onclick="Save">Save</button>

    @if (Rack.Id != 0)
{
    <button class="btn btn-outline-danger" @onclick="Delete">Delete</button>
}

@code {

    public RackConfigurationDTO Rack { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Rack = new RackConfigurationDTO();
        Rack = await RackConfigurationRepo.GetRack(1);
        


    }
    public async Task<int> SubmitAsync()
    {
        return await RackConfigurationRepo.SaveChanges(Rack);
    }

    public async Task<int> Save()
    {
        return await RackConfigurationRepo.SaveChanges(Rack);
    }

    public async Task<int> Delete()
    {
        return await RackConfigurationRepo.DeleteRack(Rack.Id);
    }

}
