@page "/Pages/Configuration/RackConfiguration"
@rendermode InteractiveServer
@using BAL
@using BAL.DTOs
@using Global.Enums;
@inject RackConfigurationRepo RackConfigurationRepo


<PageTitle>RackConfigurationPage</PageTitle>


@if (HasLoaded == true)
{
    @switch (_viewStatus)
    {
        case ConfigPageStatus.Viewing:
            <h3 class="mb-3">Rack Configuration</h3>
            break;
        case ConfigPageStatus.Creating:
            <h3 class="mb-3">Create New Rack</h3>
            break;
        case ConfigPageStatus.Editing:
            <h3 class="mb-3">Edit Rack</h3>
            break;
    }

    @if (_viewStatus == ConfigPageStatus.Viewing)
    {

        <button class=" btn btn-outline-secondary" @onclick="CreateRack">
            Create New Rack
        </button>
        <div class="">
            <table class="table table-hover align-middle text-center ">
                <thead>
                    <tr>
                        <th scope="col">Id</th>
                        <th scope="col">Name</th>
                        <th scope="col">Cols</th>
                        <th scope="col">Rows</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var rack in Racks)
                    {
                        <tr>
                            <th>@rack.Id</th>
                            <td>@rack.RackName</td>
                            <td>@rack.NumberOfColumns</td>
                            <td>@rack.NumberOfRows</td>
                            <td>
                                <button class=" btn btn-outline-secondary" @onclick="() => EditRack(rack)">
                                    Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        }

    @if (_viewStatus != ConfigPageStatus.Viewing)
        {
        <button class=" btn btn-outline-secondary mb-3" @onclick="ReturnToViewMode">
            Return To List
        </button>

        <div>
            <div class="mb-3">
                <label class="form-label">Id:</label>
                <label class="form-label">@RackToEdit.Id</label>
            </div>

            <div class="mb-3">
                <label class="form-label">Name</label>
                <input type="text" class="form-control" @bind="RackToEdit.RackName">
            </div>

            <div class="mb-3">
                <label class="form-label">Rows</label>
                <input type="number" class="form-control" @bind="RackToEdit.NumberOfRows">
            </div>

            <div class="mb-3">
                <label class="form-label">Columns</label>
                <input type="number" class="form-control" @bind="RackToEdit.NumberOfColumns">
            </div>

            <button class="btn btn-outline-success me-3" @onclick="Save">Save</button>

            @if (_viewStatus == ConfigPageStatus.Editing)
            {
                <button class="btn btn-outline-danger" @onclick="Delete">Delete</button>
            }

        </div>
        }

}

@code {
    private ConfigPageStatus _viewStatus;

    public bool HasLoaded { get; set; } = false;

    public bool InEditMode { get; set; } = false;

    public RackConfigurationDTO RackToEdit { get; set; }
    public List<RackConfigurationDTO> Racks { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Racks = new List<RackConfigurationDTO>();
        Racks = await RackConfigurationRepo.GetRacks();
        RackToEdit = new RackConfigurationDTO();


        if (Racks != null) { HasLoaded = true; }
        _viewStatus = ConfigPageStatus.Viewing;
    }

    public async Task Save()
    {
        int itemSaved = await RackConfigurationRepo.SaveChanges(RackToEdit);

        if (itemSaved > 0)
        {
            Racks = await RackConfigurationRepo.GetRacks();
            _viewStatus = ConfigPageStatus.Viewing;
        }
    }

    public async Task Delete()
    {
        int itemSaved = await RackConfigurationRepo.DeleteRack(RackToEdit.Id);

        if (itemSaved > 0)
        {
            Racks = await RackConfigurationRepo.GetRacks();
            _viewStatus = ConfigPageStatus.Viewing;
        }
    }

    public void EditRack(RackConfigurationDTO rack)
    {
        RackToEdit = rack;
        _viewStatus = ConfigPageStatus.Editing;
    }

    public void CreateRack()
    {
        RackToEdit = new RackConfigurationDTO();
        _viewStatus = ConfigPageStatus.Creating;
    }

    public void ReturnToViewMode()
    {
        RackToEdit = new RackConfigurationDTO();
        _viewStatus = ConfigPageStatus.Viewing;
    }

}

